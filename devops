结合持续集成2.0和实际业务情况，自动化流水线测试经验。

整个过程，从版本构建，资源准备，搭建和运营流水线，提交bug，bug的分派和闭环，以及项目后期的复盘工作。
###################################################################################
###################################################################################

在构建版本遇到的坑：
1. 以什么样的频率构建出版本?构建版本前后会有哪些操作来提升版本质量。
2. 不同测试需求下，对构建的版本有什么个性化的变化

对应解决版本：
1. 我们选择每天自动构建n个版本，且这n个版本时间间隔为mH，其中对n个版本都要进行各领域的冒烟测试(初步确定版本是相对稳定的)。
考虑到版本质量，在自动构建之前是需要进行个人的初次构建的，初次构建是需要通过UT测试，代码审查等工具后，二次构建才是由CI工具自动构建。二次构建后，通过单个领域的冒烟测试集后，会进行对应领域的daily测试。
为了不过分浪费资源，冒烟测试为每天n次，daily测试设定为每天触发m次，触发条件为通过该领域冒烟测试后则会执行daily测试。

2.1 对于不同测试的目标不同，常规的冒烟&daily测试，使用的是常规版本。如果是进行老化测试，则会选择老化版本，再某些场景中，可能出现某些组件更加不稳定，那么我们则会选择在其他组件用较稳定的组件去拼接不稳定的组件
这样的版本，能更针对性的测试某个组件的稳定性，可靠性等

2.2 对于weekly测试，相对耗时会比较长，可能超过24h，甚至更长时间，长时间的占用机器对于自动化测试也是一个非常大的挑战，我们会选择把测试范围更广，测试事件更长的测试，集中在weekly测试，选择当天最近的一个冒烟通过
的版本来进行验证（如果有单独的需求有周版本需要验证，也可以）

###################################################################################
###################################################################################

整个过程中，资源分配和人力分配的问题
1. 在项目前期资源匮乏的时候，如何推动整个流水线搭建和运营？
2. 项目中期，资源不均匀的时候，如何对各个测试需求分配资源？
3. 项目后期，版本相对稳定的时候，需要做哪些事情，来分析流水线的效果，以及找到下一阶段进步的方向。

对应的解决方案：
1.1 先在稳定老项目试跑，摸索和确定规则。在项目初期，我们在新项目和老项目共同搭建流水线。老项目上，由于老项目相对稳定，试错成本更低，选择用老项目来进行摸索。
摸索的范围主要是：如何分配实验室资源（多方共同使用），构建测试能力用什么样的方式和节奏搭建，确认用例选取范围，提单和闭环规则，涉及的实验室环境，分析测试报告的测试，解bug规则(闭环时间周期，紧急程度，责任人等)，
流水线效果呈现方式等等。在老项目流水线区域稳定之后，逐步搭建新项目流水线。
1.2 前期问题多，解bug人力不足，优先维护冒烟。这个时候新项目可能会遇到很多的问题，比如项目前期之前更早的样机本身质量问题，软件feature开发较为集中版本质量问题难以保障。整体缺陷数量可能是之前版本的几倍甚至更多。
这个时候，考虑到开发压力（feature开发和bugfix），很有必要先维护好冒烟质量。冒烟稳定之后，再慢慢给daily提单。当然，选择这个方法，是一定要和领导沟通的，并且会上大胆提出困难和解决办法。

2 根据目的，合理分配样机。一切行为都是从目标出发。比如到中期，我们已经拥有了一些前中期阶段，一些中期阶段，还有一些项目初期的机器。
相对来说，daily测试等大量的功能测试，在不断的回归测试过程中，让产品对应的测试点相对稳定一些，这时候就可以裁剪一些功能测试的资源，在保证功能运转的基础上，将更多的优质样机资源，投入到专项测试中，在专项测试中探寻更多可能性。
如：在alpha测试和beta测试中反馈，反馈较多的领域，从用户角度输出，可以投入更多的资源，设计更多的专项测试。在重点的老化场景和性能场景，提供更多的资源，将更多的问题提前拦截。

3 项目后期，由于在不断地做回归测试，在目前的测试能力上，能发现有效缺陷的可能性就比较低了。这个时候可以花比较多的时间做复盘，
比如。一共发现了多少有效缺陷，从领域的角度缺陷的分布情况是怎样的。关单的平均周期是多久，关单时间最长的top团队是哪些。可以做出哪些改善。
有哪些地方是可以增加测试点的，对于由于用例不适配导致的无效问题如何有多少，怎么分布的，TE提供改善方案。后期是不断去复盘这段时间流水线的效果，去寻找哪些地方是弱项，并不断去补强。当然，可能有另一种，就是项目周期很快，可以将
现有的测试能力再迁移到新的项目中。


###################################################################################
###################################################################################

在流水线搭建和运营阶段遇到的坑
在流水线搭建中，是一个循序渐进的过程，如何整理好流水线的思路呢？整个过程其实是复杂且多变的。
1. 如何找到整个测试的第一优先级，用什么样的节奏去搭建和部署流水线。
2. 由于用例基线库是非常庞大的，如何将有效的用例区分开来，在具体的领域中，如何由什么角色去筛选用例，什么角色去看护用例，用什么样的方式去筛选用例，不同项目中，又如何看护
3. 直观展现各自领域的的代码质量，以及各自领域测试的测试能力
4. 如何确定缺陷闭环规则，在这个过程中需要其他团队提供怎样的支持和规则
5. 由于流水线测试的特性，人工参与的过程较少，如果遇到log抓取不及时，缓存空间清理不及时的情况，应该如何复盘
6. 一个项目周期结束后，并且切换到另一个项目，面对几乎发现不了问题的情况，如何做到及时应对。

应对的解决办法
1. 首先要明白的是，流水线的最低标准是满足各个领域的冒烟测试。只有在冒烟测试相对稳定后，进行其他的测试，才是有意义的(对一个初步稳定的分支进行更加有针对性的测试)。冒烟稳定后，相继部署daily和weekly的功能测试（weekly的测试时间
较长，选择在周末错峰使用资源)，这里要说明一下daily测试和weekly测试是从测试频率的角度出发，在daily测试中，是可以包含各领域功能测试，性能测试，接口测试，兼容性测试等等测试的。

2. 各领域的功能测试中，需要各自整理成用例集。对于不同的测试目的，需要由TSE去筛选对应的测试策略(例如，满足xxx要求的所有用例)，将所有满足条件的用例打包成策略，完成第一级的筛选。但是很明显这样的筛选是太粗线条，
这个时候各个项目的，对应领域的TE也可以去筛选适合该项目的用例，两者取交集就获得了，能够达到测试目标又符合具体项目特点的用例了。由于这是一个长期的过程，如果用例本身需要更改，责任人则是用例的开发，用例部署的责任人则是从策略维度直接
删除或TE将从项目中直接删除

3. 并且在一个领域测试任务结束后，判断这个版本的质量可以从两个维度查看:I 可以看每个具体领域的通过率或领域的缺陷数量，II.除了通过率还可以从整机应用的角度查看，出现了多少dump问题，crash问题，anr问题等。这个可以从具体的目标来看，
如何对这也异常进行分级维护。




4. 由于设计到开发的bugfix工作，和自动化测试平台，还有缺陷管理平台。就需要确定一些规则了。比如，在流水线测试之后，一定要具备较为完善的自动化缺陷提交机制。
自动化测试平台角度：大量用例fail之后，可以进行去重功能（同一原因导致多个用例fail），之前未及时解掉的bug，在下一次流水线出发的时候不会提重复单，
缺陷管理平台角度：自动化提单对于对应的责任田有具体的开发责任人，开发责任人动态变更需要及时。
机制运营角度：解决bug不及时，能有明确的问题上升机制。TL或主管是周关闭率的第一责任人，晾上关闭率最差的top团队，需作出说明和改进方案等
如果无法
